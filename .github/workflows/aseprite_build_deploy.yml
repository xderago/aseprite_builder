name: Build and deploy Aseprite
 
on:
  workflow_dispatch:  # manual trigger
  push:
    branches:
      - master
 
env:
  BUILD_TYPE: Release
 
jobs:
  build-aseprite:
    name: Build Aseprite
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
         os: [windows-latest]  # only Windows
       fail-fast: false
    if: true  # always run, ignores version check
    steps:
      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@v1
 
      - name: Get Skia from cache
        id: skia-cache
        uses: actions/cache@v2
        with:
          path: skia
          key: skia-${{ matrix.os }}-cache
 
      - name: Download Skia if not in cache
        if: steps.skia-cache.outputs.cache-hit != 'true'
        run: |
          curl -o Skia-${{ runner.os }}-Release-X64.zip -L https://github.com/aseprite/skia/releases/download/m81-b607b32047/Skia-${{ runner.os }}-Release-X64.zip
          unzip Skia-${{ runner.os }}-Release-X64.zip -d skia
 
      - name: Download Aseprite source
        run: |
          curl -o Aseprite-source.zip -L https://github.com/aseprite/aseprite/archive/v1.1.7.zip
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build
 
      - name: (Windows) Set architecture for the produced binary
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
 
      - name: (Windows) Set Visual Studio build environment
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-vsdevenv@v1
 
      - name: (Windows) Run CMake
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build
        shell: cmd
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/' -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..
 
      - name: Run Ninja
        working-directory: aseprite/build
        run: ninja aseprite
 
      - name: (Windows) Make portable zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
 
      - name: Create zip
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-Windows.zip *
 
      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ secrets.UPLOAD_URL }}  # see note below
          asset_path: aseprite/build/bin/Aseprite-Windows.zip
          asset_name: Aseprite-Windows.zip
          asset_content_type: application/zip
 
